# git 的基本使用

## 安装配置

    apt-get install git
    git config --global user.name "runoob"
    git config --global user.email test@runoob.com
    
## 查看配置
    git config --list



## 工作区、暂存区和版本库

* 工作区：就是你在电脑里能看到的目录。

* 暂存区：英文叫stage, 或index。一般存放在 ".git目录下" 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。

* 版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。


![git](http://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg "git")


* 当对工作区修改（或新增）的文件执行 "git add" 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。
* 当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。 

* 当执行 "git reset HEAD" 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。

* 当执行 "git rm --cached <file>" 命令时，会直接从暂存区删除文件，工作区则不做出改变。 

* 当执行 "git checkout ." 或者 "git checkout -- <file>" 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。 

* 当执行 "git checkout HEAD ." 或者 "git checkout HEAD <file>" 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。 


## 本地仓库

初始化本地仓库

    git init
    git init <directory>
    
## 克隆远程仓库

    git clone <repo>
    git clone <repo> <directory>

## 提交缓存

git add 命令可将该文件添加到缓存

    git add . (全部)
    git add <file>

## 查看项目当前状态

git status 显示你上次提交更新后的更改或者写入缓存的改动

    git status
    git status -s  简短信息    


## 查看修改详细信息

git diff 一行一行地显示具体改动


    尚未缓存的改动：git diff
    查看已缓存的改动： git diff --cached
    查看已缓存的与未缓存的所有改动：git diff HEAD
    显示摘要而非整个 diff：git diff --stat
    
## 提交

将缓存区内容提交到版本库

    git commit -m 'message' 
    git commit -a (表示：add+commit)

## 查看提交记录

git log命令显示从最近到最远的提交日志

    $ git log
    commit  ea34578d5496d7dd233c827ed32a8cd576c5ee85
    Author: Michael Liao <askxuefeng@gmail.com>
    Date:   Tue Aug 20 14:53:12 2013 +0800

        add distributed
    
    
    
    commit  ea34578d5496d7dd233c827ed32a8cd576c5ee85  版本号
    
## 取消已缓存内容

git reset HEAD 命令用于取消已缓存的内容

在Git中，用HEAD表示当前版本，，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

    git reset HEAD --<file> 
    git reset --hard HEAD^ 回退到上一个版本
    git rest --hard 版本id  回退到版本id对应版本






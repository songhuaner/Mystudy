# git 的基本使用

## 安装配置

    apt-get install git
    git config --global user.name "runoob"
    git config --global user.email test@runoob.com
    
## 查看配置
    git config --list



## 工作区、暂存区和版本库

* 工作区：就是你在电脑里能看到的目录。

* 暂存区：英文叫stage, 或index。一般存放在 ".git目录下" 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。

* 版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。


![git](http://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg "git")


* 当对工作区修改（或新增）的文件执行 "git add" 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。
* 当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。 

* 当执行 "git reset HEAD" 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。

* 当执行 "git rm --cached <file>" 命令时，会直接从暂存区删除文件，工作区则不做出改变。 

* 当执行 "git checkout ." 或者 "git checkout -- <file>" 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。 

* 当执行 "git checkout HEAD ." 或者 "git checkout HEAD <file>" 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。 


## 本地仓库

初始化本地仓库

    git init
    git init <directory>
    
## 克隆远程仓库

    git clone <repo>
    git clone <repo> <directory>

## 提交缓存

git add 命令可将该文件添加到缓存

    git add . (全部)
    git add <file>

## 查看项目当前状态

git status 显示你上次提交更新后的更改或者写入缓存的改动

    git status
    git status -s  简短信息    


## 查看修改详细信息

git diff 一行一行地显示具体改动


    尚未缓存的改动：git diff
    查看已缓存的改动： git diff --cached
    查看已缓存的与未缓存的所有改动：git diff HEAD
    显示摘要而非整个 diff：git diff --stat
    
## 提交

将缓存区内容提交到版本库

    git commit -m 'message' 
    git commit -a (表示：add+commit)

## 查看提交记录

git log命令显示从最近到最远的提交日志

    $ git log
    commit  ea34578d5496d7dd233c827ed32a8cd576c5ee85
    Author: Michael Liao <askxuefeng@gmail.com>
    Date:   Tue Aug 20 14:53:12 2013 +0800

        add distributed

    commit  ea34578d5496d7dd233c827ed32a8cd576c5ee85  版本号

## 取消已缓存内容

git reset HEAD 命令用于取消已缓存的内容

在Git中，用HEAD表示当前版本，，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

    git reset HEAD --<file> 
    git reset --hard HEAD^ 回退到上一个版本
    git rest --hard 版本id  回退到版本id对应版本

## 回退工作区修改

git checkout -- file 可以丢弃工作区的修改，让这个文件回到最近一次git commit或git add时的状态

自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

## 分支管理

### 创建分支

    git branch (branchname)

### 查看分支

    git branch

### 切换分支

    git checkout (branchname)

### 删除分支

    git branch -d (branchname)

### 合并分支

 git merge 被合并分支
 
## 远程仓库

### 添加远程仓库链接

    git remote add [shortname] [url]

### 查看远程仓库链接

    git remote

使用 git init 初始化的本地仓库，需要通过添加远程仓库链接，才能与远程仓库通信

使用 git clone 从远程仓库克隆后，自动会添加远程仓库链接，无需手动添加

### ssh配置 

生成key

    ssh-keygen -t rsa -C "youremail@example.com"

配置key

在~/下生成.ssh文件夹，打开 id_rsa.pub，复制里面的 key

添加到github

![github](http://www.runoob.com/wp-content/uploads/2015/03/EC8F8872-091A-4CAB-90F2-616F34F350A9.jpg "github")

### 推送远程仓库

    git push <远程主机名> <本地分支名>:<远程分支名>
    
### 更新本地仓库

    git pull <远程主机名> <远程分支名>:<本地分支名>  


## 搭建远程仓库服务

### 安装Git

### 创建证书登录

收集所有需要登录的用户的公钥，公钥位于id_rsa.pub文件中，把我们的公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。

### 创建git用户组和用户

    $ groupadd git
    $ useradd git -g git

### 初始化Git仓库

    $ git init --bare XXX.git

以上命令Git创建一个空仓库，服务器上的Git仓库通常都以.git结尾。然后，把仓库所属用户改为git：

    $ chown -R git:git XXX.git


### 禁用shell登录

通过编辑/etc/passwd文件完成。找到类似下面的一行：

git:x:1001:1001:,,,:/home/git:/bin/bash

改为：

git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell



### 克隆仓库

$ git clone git@192.168.45.4:/home/gitrepo/runoob.git
Cloning into 'runoob'...
warning: You appear to have cloned an empty repository.
Checking connectivity... done.

192.168.45.4 为 Git 所在服务器 ip ，你需要将其修改为你自己的 Git 服务 ip。















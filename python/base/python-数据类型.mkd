# python 基础数据类型

[TOC]


* Number（数字） 
* String（字符串） 
* List（列表） 
* Tuple（元组） 
* Sets（集合） 
* Dictionary（字典） 

---

## Number（数字）

**数字数据类型用于存储数值。它们是不可变数据类型。这意味着，更改数字数据类型的值会导致新分配对象。**

### 数字类型
* 整型(Int) - 通常被称为是整型或整数，是正或负整数，不带小数点。
Python3 整型是没有限制大小的，可以当作 Long 类型使用，所以 Python3 没有 Python2 的 Long 类型。 
* 浮点型(float) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250） 
* 复数( (complex)) - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。 


### 数字定义
```python
int1 = 1
int2 = int(2)


float1 = 1.0
float2 = float(2) #2.0

complex1 = complex(3) #虚部为0
complex2 = complex(1,2) #1+2j
```

### 数字类型转换内置函数

**int：根据传入的参数创建一个新的整数**

    >>> int() #不传入参数时，得到结果0。
    0
    >>> int(3)
    3
    >>> int(3.6)
    3

**float：根据传入的参数创建一个新的浮点数**

    >>> float() #不提供参数的时候，返回0.0
    0.0
    >>> float(3)
    3.0
    >>> float('3')
    3.0

**complex：根据传入参数创建一个新的复数**

    >>> complex() #当两个参数都不提供时，返回复数 0j。
    0j
    >>> complex('1+2j') #传入字符串创建复数
    (1+2j)
    >>> complex(1,2) #传入数值创建复数
    (1+2j)


### 数学运算内置函数


**abs：求数值的绝对值**
    
    >>>abs(-2)  #2

**divmod：返回两个数值的商和余数**

    >>> divmod(5,2)
    (2, 1)
    >> divmod(5.5,2)
    (2.0, 1.5)

**max：返回可迭代对象中的元素中的最大值或者所有参数的最大值**
    
    >>> max(1,2,3) # 传入3个参数 取3个中较大者3
    >>> max('1234') # 传入1个可迭代对象，取其最大元素值
    '4'

    >>> max(-1,0) # 数值默认去数值较大者
    0
    >>> max(-1,0,key = abs) # 传入了求绝对值函数，则参数都会进行求绝对值后再取较大者
    -1
    
**min：返回可迭代对象中的元素中的最小值或者所有参数的最小值**
    
    >>> min(1,2,3) # 传入3个参数 取3个中较小者
    1
    >>> min('1234') # 传入1个可迭代对象，取其最小元素值
    '1'

    >>> min(-1,-2) # 数值默认去数值较小者
    -2
    >>> min(-1,-2,key = abs)  # 传入了求绝对值函数，则参数都会进行求绝对值后再取较小者
    -1

**pow：返回两个数值的幂运算值或其与指定整数的模值**

    >>> pow(2,3)
    >>> 2**3

    >>> pow(2,3,5)
    >>> pow(2,3)%5

**round：对浮点数进行四舍五入求值**

    >>> round(1.1314926,1)
    1.1
    >>> round(1.1314926,5)
    1.13149

**sum：对元素类型是数值的可迭代对象中的每个元素求和**
    
    # 传入可迭代对象
    >>> sum((1,2,3,4))
    10
    # 元素类型必须是数值型
    >>> sum((1.5,2.5,3.5,4.5))
    12.0
    >>> sum((1,2,3,4),-10)
    0

### 数学函数

#### math模块 常用方法
(略)

#### random模块 随机数  常用方法
(略)


### 缓冲池

** python 的内置数据类型，数值型，字符串，列表，字典等都会有自己的对象缓存池，
这样做的好处是，避免了频繁的申请内存，释放内存，这样会极大的降低应用程序的运行速度，还会造成大量的内存碎片。因此提供对象缓存机制是非常重要的。**

对于**-5 ~ 257 **范围内的数值, 创建后python 会将其加入缓存池当中，当再次使用时，则直接从缓存池中返回，而不需要申请内存，如果超出了这个范围的数值，则每次都需要申请内存。

----

## String（字符串）
**不可变数据类型**  
可以理解为**不可变的字符序列**

### 定义

str1 = "str1"

str2 = 'str2'

### 内置函数

**str：返回一个对象的字符串表现形式**
    复制代码

    >>> str()
    ''
    >>> str(None)
    'None'
    >>> str('abc')
    'abc'
    >>> str(123)
    '123'

### 自有方法与属性

**string.capitalize()**

把字符串的第一个字符大写

**string.center(width)**

返回一个原字符串居中,并使用空格填充至长度 width 的新字符串

**string.count(str, beg=0, end=len(string))**

返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数

**string.decode(encoding='UTF-8', errors='strict')**

以 encoding 指定的编码格式解码 string，如果出错默认报一个 ValueError 的 异 常 ， 除非 errors 指 定 的 是 'ignore' 或 者'replace'

**string.encode(encoding='UTF-8', errors='strict')**

以 encoding 指定的编码格式编码 string，如果出错默认报一个ValueError 的异常，除非 errors 指定的是'ignore'或者'replace'

**string.endswith(obj, beg=0, end=len(string))**

检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.

**string.expandtabs(tabsize=8)**

把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8。

**string.find(str, beg=0, end=len(string))**

检测 str 是否包含在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1

**string.format()**

格式化字符串

**string.index(str, beg=0, end=len(string))**

跟find()方法一样，只不过如果str不在 string中会报一个异常.

**string.isalnum()**

如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False

**string.isalpha()**

如果 string 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False

**string.isdecimal()**

如果 string 只包含十进制数字则返回 True 否则返回 False.

**string.isdigit()**

如果 string 只包含数字则返回 True 否则返回 False.

**string.islower()**

如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False

**string.isnumeric()**

如果 string 中只包含数字字符，则返回 True，否则返回 False

**string.isspace()**

如果 string 中只包含空格，则返回 True，否则返回 False.

**string.istitle()**

如果 string 是标题化的(见 title())则返回 True，否则返回 False

**string.isupper()**

如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False

**string.join(seq)**

以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串

**string.ljust(width)**

返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串

**string.lower()**

转换 string 中所有大写字符为小写.

**string.lstrip()**

截掉 string 左边的空格

**string.maketrans(intab, outtab])**

maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。

**max(str)**

返回字符串 str 中最大的字母。

**min(str)**

返回字符串 str 中最小的字母。

**string.partition(str)**

有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把 字 符 串 string 分 成 一 个 3 元 素 的 元 组 (string_pre_str,str,string_post_str),如果 string 中不包含str 则 string_pre_str == string.

**string.replace(str1, str2,  num=string.count(str1))**

把 string 中的 str1 替换成 str2,如果 num 指定，则替换不超过 num 次.

**string.rfind(str, beg=0,end=len(string) )**

类似于 find()函数，不过是从右边开始查找.

**string.rindex( str, beg=0,end=len(string))**

类似于 index()，不过是从右边开始.

**string.rjust(width)**

返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串

**string.rpartition(str)**

类似于 partition()函数,不过是从右边开始查找.

**string.rstrip()**

删除 string 字符串末尾的空格.

**string.split(str="", num=string.count(str))**

以 str 为分隔符切片 string，如果 num有指定值，则仅分隔 num 个子字符串

**string.splitlines([keepends])**

按照行('\r', '\r\n', \n')分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。

**string.startswith(obj, beg=0,end=len(string))**

检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查.

**string.strip([obj])**

在 string 上执行 lstrip()和 rstrip()

**string.swapcase()**

翻转 string 中的大小写

**string.title()**

返回"标题化"的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())

**string.translate(str, del="")**

根据 str 给出的表(包含 256 个字符)转换 string 的字符,

要过滤掉的字符放到 del 参数中

**string.upper()**

转换 string 中的小写字母为大写

**string.zfill(width)**

返回长度为 width 的字符串，原字符串 string 右对齐，前面填充0

**string.isdecimal()**

isdecimal()方法检查字符串是否只包含十进制字符。这种方法只存在于unicode对象。 

### 格式化

    print "My name is %s and weight is %d kg!" % ('Zara', 21) 
    My name is Zara and weight is 21 kg!







----

## 序列

### 通用操作







### List（列表）




### Que (队列)


### Stack（栈）

### Tuple（元组）





----

## Sets（集合）






-----

## Dictionary（字典）







-----














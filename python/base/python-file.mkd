# python file

### file 打开文件

open（）函数

作用：打开文件，创建一个file 对象。

    file object = open(file_name [, access_mode][, buffering])

    file_name : 是一个包含了需要访问的文件名的字符串值。
    access_mode ： 决定了打开文件的模式： 只读、写入、追加  ，默认文件访问模式是只读（r）
    buffering ： if  buffering ==0 ,则不会寄存，bufferiing =1 ,文件会寄存行。if buffering>1 的整数，表明了寄存区的缓冲大小。if                             buffering <0 ,寄存区的缓冲大小为系统默认。

#### 模式	描述

    r	以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
    rb	以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。
    r+	打开一个文件用于读写。文件指针将会放在文件的开头。
    rb+	以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。
    w	打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
    wb	以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。
    w+	打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
    wb+	以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。
    a	打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
    ab	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
    a+	打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。
    ab+	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。


#### 属性	描述

    file.closed	返回true如果文件已被关闭，否则返回false。
    file.mode	返回被打开文件的访问模式。
    file.name	返回文件的名称。
    file.softspace	如果用print输出后，必须跟一个空格符，则返回 false。否则返回true。

### file读文件

#### read（）

作用：从一个打开的文件读取一个字符串

方法：file.read(count);

count: 是要从已打开文件中读取的字节计数。该方法从文件的开头开始读入，如果没有传入count，它会尝试尽可能多地读取更多的内容，很可能是直到文件的末尾。

#### readlines()

作用：用于读取所以行（直到结束符EOF），并返回列表。该列表可由for 语句处理。

读取文件内容，文件内容的每一行都是一个字符串，最后返回一个list

语法：file.readlines()

返回值： 列表，包含所有行


#### readline()

作用：用于从文件中读取一行，返回一个字符串。包括“\n”.如果指定了一个非负数的参数，则返回指定大小的字节数，包括 "\n" 字符

语法：file.readline()

返回值： 返回从字符串中读取的字节

总结： readlines 与readline  的区别，readlines 主要是读取文件内容的所有内容，且，每一行都是一个字符串，最后返回一个list。 而readline是读取文件内容的某一行，返回一个字符串。

### file 写文件

#### write（）

方法可以将任何字符串写入一个打开的文件。该方法不会再字符串的结尾添加换行符（“\n”）

语法： file.write(string)

string : 是要写入到已经打开文件的内容

#### writelines()

作用： 用于向文件中写入一序列的字符串。这一序列字符串可以是迭代对象产生的，如字符串列表。换行需制定换行符\n

语法：file.writlines(str)

str--要写入的字符串序列

返回值： 无

### file 常用方法

#### flush()

用来刷新缓冲区，即将缓冲区的内容立刻写入文件，同时清空缓冲区，不需要是被动的等待输出缓冲区

一般，文件关闭后自动刷新缓冲区。但有时你需要在关闭前刷新它，这时就可以使用 flush() 方法

语法：file.flush()

返回值：无

#### tell ()

作用： 返回文件的当前位置，即文件指正当前位置

语法： file.tell(offset[, where])

返回值：文件位置


#### seek（offset [,from]）

方法改变当前文件的位置。

Offset变量表示要移动的字节数。

From变量指定开始移动字节的参考位置。

如果from被设为0，这意味着将文件的开头作为移动字节的参考位置。如果设为1，则使用当前的位置作为参考位置。如果它被设为2，那么该文件的末尾将作为参考位置。 


#### next()

作用：读取文件的下一行内容，返回一个字符串。

语法： file.next()

返回值： 返回文件的下一行

#### close()方法

File 对象的 close（）方法刷新缓冲区里任何还没写入的信息，并关闭该文件，这之后便不能再进行写入。

当一个文件对象的引用被重新指定给另一个文件时，Python 会关闭之前的文件。用 close（）方法关闭文件是一个很好的习惯